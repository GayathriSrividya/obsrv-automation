apiVersion: batch/v1
kind: Job
metadata:
  labels:
{{ include "service.labels.standard" . | indent 4 }}
  name: {{ .Release.Name }}
spec:
  backoffLimit: 1
  activeDeadlineSeconds: {{ .Values.job.activeDeadlineSeconds }}
  template:
    metadata:
      name: {{ .Release.Name }}
      labels:
{{ include "service.labels.standard" . | indent 8 }}
    spec:
      initContainers:
      - name: pgcheck
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        env:
        - name: PG_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_HOST
        - name: PG_PORT
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_PORT
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_USER
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_PASS
        command:
        - /bin/sh
        args:
        - -ecx
        - while ! pg_isready -U "${PG_USER}" --host "${PG_HOST}" --port "${PG_PORT}"; do sleep 1; done
      containers:
      - name: {{ .Release.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        env:
        - name: PG_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_HOST
        - name: PG_PORT
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_PORT
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_USER
        - name: PG_DBNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_DBNAME
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: PG_PASS
        - name: SQL_SCRIPT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-cm
              key: SQL_SCRIPT
        command:
        - /bin/sh
        args:
        - -ecx
        - psql -U "${PG_USER}" --host "${PG_HOST}" --port "${PG_PORT}" --dbname "${PG_DBNAME}" --command="${SQL_SCRIPT}"
      restartPolicy: Never